{"version":3,"sources":["../../../../../../packages/vite/src/executors/build/build.impl.ts"],"sourcesContent":["import {\n  detectPackageManager,\n  ExecutorContext,\n  joinPathFragments,\n  logger,\n  offsetFromRoot,\n  stripIndents,\n  writeJsonFile,\n} from '@nx/devkit';\nimport {\n  getProjectTsConfigPath,\n  normalizeViteConfigFilePath,\n} from '../../utils/options-utils';\nimport { ViteBuildExecutorOptions } from './schema';\nimport {\n  copyAssets,\n  createLockFile,\n  createPackageJson,\n  getLockFileName,\n} from '@nx/js';\nimport { existsSync, writeFileSync } from 'fs';\nimport { relative, resolve } from 'path';\nimport { createAsyncIterable } from '@nx/devkit/src/utils/async-iterable';\nimport {\n  createBuildableTsConfig,\n  validateTypes,\n} from '../../utils/executor-utils';\n\nexport async function* viteBuildExecutor(\n  options: Record<string, any> & ViteBuildExecutorOptions,\n  context: ExecutorContext\n) {\n  process.env.VITE_CJS_IGNORE_WARNING = 'true';\n  // Allows ESM to be required in CJS modules. Vite will be published as ESM in the future.\n  const { mergeConfig, build, loadConfigFromFile } = await (Function(\n    'return import(\"vite\")'\n  )() as Promise<typeof import('vite')>);\n  const projectRoot =\n    context.projectsConfigurations.projects[context.projectName].root;\n  createBuildableTsConfig(projectRoot, options, context);\n\n  const viteConfigPath = normalizeViteConfigFilePath(\n    context.root,\n    projectRoot,\n    options.configFile\n  );\n  const root =\n    projectRoot === '.'\n      ? process.cwd()\n      : relative(context.cwd, joinPathFragments(context.root, projectRoot));\n\n  const { buildOptions, otherOptions } = await getBuildExtraArgs(options);\n\n  const resolved = await loadConfigFromFile(\n    {\n      mode: otherOptions?.mode ?? 'production',\n      command: 'build',\n    },\n    viteConfigPath\n  );\n\n  const outDir =\n    joinPathFragments(offsetFromRoot(projectRoot), options.outputPath) ??\n    resolved?.config?.build?.outDir;\n\n  const buildConfig = mergeConfig(\n    {\n      // This should not be needed as it's going to be set in vite.config.ts\n      // but leaving it here in case someone did not migrate correctly\n      root: resolved.config.root ?? root,\n      configFile: viteConfigPath,\n    },\n    {\n      build: {\n        outDir,\n        ...buildOptions,\n      },\n      ...otherOptions,\n    }\n  );\n\n  if (!options.skipTypeCheck) {\n    await validateTypes({\n      workspaceRoot: context.root,\n      projectRoot: projectRoot,\n      tsconfig: getProjectTsConfigPath(projectRoot),\n    });\n  }\n\n  const watcherOrOutput = await build(buildConfig);\n\n  const libraryPackageJson = resolve(projectRoot, 'package.json');\n  const rootPackageJson = resolve(context.root, 'package.json');\n\n  // Here, we want the outdir relative to the workspace root.\n  // So, we calculate the relative path from the workspace root to the outdir.\n  const outDirRelativeToWorkspaceRoot = outDir.replaceAll('../', '');\n  const distPackageJson = resolve(\n    outDirRelativeToWorkspaceRoot,\n    'package.json'\n  );\n\n  // Generate a package.json if option has been set.\n  if (options.generatePackageJson) {\n    if (context.projectGraph.nodes[context.projectName].type !== 'app') {\n      logger.warn(\n        stripIndents`The project ${context.projectName} is using the 'generatePackageJson' option which is deprecated for library projects. It should only be used for applications.\n        For libraries, configure the project to use the '@nx/dependency-checks' ESLint rule instead (https://nx.dev/packages/eslint-plugin/documents/dependency-checks).`\n      );\n    }\n\n    const builtPackageJson = createPackageJson(\n      context.projectName,\n      context.projectGraph,\n      {\n        target: context.targetName,\n        root: context.root,\n        isProduction: !options.includeDevDependenciesInPackageJson, // By default we remove devDependencies since this is a production build.\n      }\n    );\n\n    builtPackageJson.type = 'module';\n\n    writeJsonFile(\n      `${outDirRelativeToWorkspaceRoot}/package.json`,\n      builtPackageJson\n    );\n    const packageManager = detectPackageManager(context.root);\n\n    const lockFile = createLockFile(\n      builtPackageJson,\n      context.projectGraph,\n      packageManager\n    );\n    writeFileSync(\n      `${outDirRelativeToWorkspaceRoot}/${getLockFileName(packageManager)}`,\n      lockFile,\n      {\n        encoding: 'utf-8',\n      }\n    );\n  }\n  // For buildable libs, copy package.json if it exists.\n  else if (\n    !existsSync(distPackageJson) &&\n    existsSync(libraryPackageJson) &&\n    rootPackageJson !== libraryPackageJson\n  ) {\n    await copyAssets(\n      {\n        outputPath: outDirRelativeToWorkspaceRoot,\n        assets: [\n          {\n            input: projectRoot,\n            output: '.',\n            glob: 'package.json',\n          },\n        ],\n      },\n      context\n    );\n  }\n\n  if ('on' in watcherOrOutput) {\n    const iterable = createAsyncIterable<{ success: boolean }>(({ next }) => {\n      let success = true;\n      watcherOrOutput.on('event', (event) => {\n        if (event.code === 'START') {\n          success = true;\n        } else if (event.code === 'ERROR') {\n          success = false;\n        } else if (event.code === 'END') {\n          next({ success });\n        }\n        // result must be closed when present.\n        // see https://rollupjs.org/guide/en/#rollupwatch\n        if ('result' in event) {\n          event.result.close();\n        }\n      });\n    });\n    yield* iterable;\n  } else {\n    const output = watcherOrOutput?.['output'] || watcherOrOutput?.[0]?.output;\n    const fileName = output?.[0]?.fileName || 'main.cjs';\n    const outfile = resolve(outDirRelativeToWorkspaceRoot, fileName);\n    yield { success: true, outfile };\n  }\n}\n\nexport async function getBuildExtraArgs(\n  options: ViteBuildExecutorOptions\n): Promise<{\n  // vite BuildOptions\n  buildOptions: Record<string, unknown>;\n  otherOptions: Record<string, any>;\n}> {\n  // support passing extra args to vite cli\n  const schema = await import('./schema.json');\n  const extraArgs = {};\n  for (const key of Object.keys(options)) {\n    if (!schema.properties[key]) {\n      extraArgs[key] = options[key];\n    }\n  }\n\n  const buildOptions = {};\n  const buildSchemaKeys = [\n    'target',\n    'polyfillModulePreload',\n    'modulePreload',\n    'outDir',\n    'assetsDir',\n    'assetsInlineLimit',\n    'cssCodeSplit',\n    'cssTarget',\n    'cssMinify',\n    'sourcemap',\n    'minify',\n    'terserOptions',\n    'rollupOptions',\n    'commonjsOptions',\n    'dynamicImportVarsOptions',\n    'write',\n    'emptyOutDir',\n    'copyPublicDir',\n    'manifest',\n    'lib',\n    'ssr',\n    'ssrManifest',\n    'ssrEmitAssets',\n    'reportCompressedSize',\n    'chunkSizeWarningLimit',\n    'watch',\n  ];\n  const otherOptions = {};\n  for (const key of Object.keys(extraArgs)) {\n    if (buildSchemaKeys.includes(key)) {\n      buildOptions[key] = extraArgs[key];\n    } else {\n      otherOptions[key] = extraArgs[key];\n    }\n  }\n\n  return {\n    buildOptions,\n    otherOptions,\n  };\n}\n\nexport default viteBuildExecutor;\n"],"names":["viteBuildExecutor","getBuildExtraArgs","options","context","resolved","process","env","VITE_CJS_IGNORE_WARNING","mergeConfig","build","loadConfigFromFile","Function","projectRoot","projectsConfigurations","projects","projectName","root","createBuildableTsConfig","viteConfigPath","normalizeViteConfigFilePath","configFile","cwd","relative","joinPathFragments","buildOptions","otherOptions","mode","command","outDir","offsetFromRoot","outputPath","config","buildConfig","skipTypeCheck","validateTypes","workspaceRoot","tsconfig","getProjectTsConfigPath","watcherOrOutput","libraryPackageJson","resolve","rootPackageJson","outDirRelativeToWorkspaceRoot","replaceAll","distPackageJson","generatePackageJson","projectGraph","nodes","type","logger","warn","stripIndents","builtPackageJson","createPackageJson","target","targetName","isProduction","includeDevDependenciesInPackageJson","writeJsonFile","packageManager","detectPackageManager","lockFile","createLockFile","writeFileSync","getLockFileName","encoding","existsSync","copyAssets","assets","input","output","glob","iterable","createAsyncIterable","next","success","on","event","code","result","close","fileName","outfile","schema","extraArgs","key","Object","keys","properties","buildSchemaKeys","includes"],"mappings":"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"}