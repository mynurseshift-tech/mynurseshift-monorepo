{"version":3,"sources":["../../../../../../packages/vite/src/generators/init/init.ts"],"sourcesContent":["import { readNxJson, runTasksInSerial, Tree, updateNxJson } from '@nx/devkit';\n\nimport { initGenerator as jsInitGenerator } from '@nx/js';\n\nimport { InitGeneratorSchema } from './schema';\nimport {\n  addPlugin,\n  checkDependenciesInstalled,\n  moveToDevDependencies,\n} from './lib/utils';\n\nexport function updateNxJsonSettings(tree: Tree) {\n  const nxJson = readNxJson(tree);\n\n  const productionFileSet = nxJson.namedInputs?.production;\n  if (productionFileSet) {\n    productionFileSet.push(\n      '!{projectRoot}/**/?(*.)+(spec|test).[jt]s?(x)?(.snap)',\n      '!{projectRoot}/tsconfig.spec.json'\n    );\n\n    nxJson.namedInputs.production = Array.from(new Set(productionFileSet));\n  }\n\n  const hasPlugin = nxJson.plugins?.some((p) =>\n    typeof p === 'string'\n      ? p === '@nx/vite/plugin'\n      : p.plugin === '@nx/vite/plugin'\n  );\n\n  if (!hasPlugin) {\n    nxJson.targetDefaults ??= {};\n    nxJson.targetDefaults['@nx/vite:test'] ??= {};\n    nxJson.targetDefaults['@nx/vite:test'].cache ??= true;\n    nxJson.targetDefaults['@nx/vite:test'].inputs ??= [\n      'default',\n      productionFileSet ? '^production' : '^default',\n    ];\n  }\n\n  updateNxJson(tree, nxJson);\n}\n\nexport async function initGenerator(tree: Tree, schema: InitGeneratorSchema) {\n  moveToDevDependencies(tree);\n  updateNxJsonSettings(tree);\n  const tasks = [];\n\n  tasks.push(\n    await jsInitGenerator(tree, {\n      ...schema,\n      skipFormat: true,\n      tsConfigName: schema.rootProject ? 'tsconfig.json' : 'tsconfig.base.json',\n    })\n  );\n  const addPlugins = process.env.NX_PCV3 === 'true';\n  if (addPlugins) {\n    addPlugin(tree);\n  }\n  tasks.push(checkDependenciesInstalled(tree, schema));\n  return runTasksInSerial(...tasks);\n}\n\nexport default initGenerator;\n"],"names":["updateNxJsonSettings","initGenerator","tree","nxJson","readNxJson","productionFileSet","namedInputs","production","push","Array","from","Set","hasPlugin","plugins","some","p","plugin","targetDefaults","cache","inputs","updateNxJson","schema","moveToDevDependencies","tasks","jsInitGenerator","skipFormat","tsConfigName","rootProject","addPlugins","process","env","NX_PCV3","addPlugin","checkDependenciesInstalled","runTasksInSerial"],"mappings":";;;;;;;;IAWgBA,oBAAoB;eAApBA;;IAgCMC,aAAa;eAAbA;;IAoBtB,OAA6B;eAA7B;;;;wBA/DiE;oBAEhB;uBAO1C;AAEA,SAASD,qBAAqBE,IAAU;QAGnBC,qBAURA;IAZlB,MAAMA,SAASC,IAAAA,kBAAU,EAACF;IAE1B,MAAMG,qBAAoBF,sBAAAA,OAAOG,WAAW,qBAAlBH,oBAAoBI,UAAU;IACxD,IAAIF,mBAAmB;QACrBA,kBAAkBG,IAAI,CACpB,yDACA;QAGFL,OAAOG,WAAW,CAACC,UAAU,GAAGE,MAAMC,IAAI,CAAC,IAAIC,IAAIN;IACrD;IAEA,MAAMO,aAAYT,kBAAAA,OAAOU,OAAO,qBAAdV,gBAAgBW,IAAI,CAAC,CAACC,IACtC,OAAOA,MAAM,WACTA,MAAM,oBACNA,EAAEC,MAAM,KAAK;IAGnB,IAAI,CAACJ,WAAW;YACdT,SACAA,wBAAsB,aACtBA,mCACAA;;QAHAA,oBAAAA,UAAAA,QAAOc,4CAAPd,QAAOc,iBAAmB,CAAC;;QAC3Bd,MAAAA,yBAAAA,OAAOc,cAAc,CAAA,CAAC,cAAA,gBAAgB,gBAAtCd,sBAAqB,CAAC,YAAgB,GAAK,CAAC;;QAC5CA,WAAAA,oCAAAA,OAAOc,cAAc,CAAC,gBAAgB,EAACC,0BAAvCf,kCAAuCe,QAAU;;QACjDf,YAAAA,qCAAAA,OAAOc,cAAc,CAAC,gBAAgB,EAACE,4BAAvChB,mCAAuCgB,SAAW;YAChD;YACAd,oBAAoB,gBAAgB;SACrC;IACH;IAEAe,IAAAA,oBAAY,EAAClB,MAAMC;AACrB;AAEO,eAAeF,cAAcC,IAAU,EAAEmB,MAA2B;IACzEC,IAAAA,4BAAqB,EAACpB;IACtBF,qBAAqBE;IACrB,MAAMqB,QAAQ,EAAE;IAEhBA,MAAMf,IAAI,CACR,MAAMgB,IAAAA,iBAAe,EAACtB,MAAM,eACvBmB;QACHI,YAAY;QACZC,cAAcL,OAAOM,WAAW,GAAG,kBAAkB;;IAGzD,MAAMC,aAAaC,QAAQC,GAAG,CAACC,OAAO,KAAK;IAC3C,IAAIH,YAAY;QACdI,IAAAA,gBAAS,EAAC9B;IACZ;IACAqB,MAAMf,IAAI,CAACyB,IAAAA,iCAA0B,EAAC/B,MAAMmB;IAC5C,OAAOa,IAAAA,wBAAgB,KAAIX;AAC7B;MAEA,WAAetB"}