"use strict";
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    checkDependenciesInstalled: function() {
        return checkDependenciesInstalled;
    },
    moveToDevDependencies: function() {
        return moveToDevDependencies;
    },
    createVitestConfig: function() {
        return createVitestConfig;
    },
    addPlugin: function() {
        return addPlugin;
    }
});
const _devkit = require("@nx/devkit");
const _versions = require("../../../utils/versions");
function checkDependenciesInstalled(host, schema) {
    const packageJson = (0, _devkit.readJson)(host, 'package.json');
    const devDependencies = {};
    const dependencies = {};
    packageJson.dependencies = packageJson.dependencies || {};
    packageJson.devDependencies = packageJson.devDependencies || {};
    // base deps
    devDependencies['@nx/vite'] = _versions.nxVersion;
    devDependencies['vite'] = _versions.viteVersion;
    devDependencies['vitest'] = _versions.vitestVersion;
    devDependencies['@vitest/ui'] = _versions.vitestVersion;
    if (schema.testEnvironment === 'jsdom') {
        devDependencies['jsdom'] = _versions.jsdomVersion;
    } else if (schema.testEnvironment === 'happy-dom') {
        devDependencies['happy-dom'] = _versions.happyDomVersion;
    } else if (schema.testEnvironment === 'edge-runtime') {
        devDependencies['@edge-runtime/vm'] = _versions.edgeRuntimeVmVersion;
    } else if (schema.testEnvironment !== 'node' && schema.testEnvironment) {
        _devkit.logger.info(`A custom environment was provided: ${schema.testEnvironment}. You need to install it manually.`);
    }
    if (schema.uiFramework === 'react') {
        if (schema.compiler === 'swc') {
            devDependencies['@vitejs/plugin-react-swc'] = _versions.vitePluginReactSwcVersion;
        } else {
            devDependencies['@vitejs/plugin-react'] = _versions.vitePluginReactVersion;
        }
    }
    if (schema.includeLib) {
        devDependencies['vite-plugin-dts'] = _versions.vitePluginDtsVersion;
    }
    return (0, _devkit.addDependenciesToPackageJson)(host, dependencies, devDependencies);
}
function moveToDevDependencies(tree) {
    (0, _devkit.updateJson)(tree, 'package.json', (packageJson)=>{
        packageJson.dependencies = packageJson.dependencies || {};
        packageJson.devDependencies = packageJson.devDependencies || {};
        if (packageJson.dependencies['@nx/vite']) {
            packageJson.devDependencies['@nx/vite'] = packageJson.dependencies['@nx/vite'];
            delete packageJson.dependencies['@nx/vite'];
        }
        return packageJson;
    });
}
function createVitestConfig(tree) {
    var _nxJson_namedInputs;
    const nxJson = (0, _devkit.readNxJson)(tree);
    const productionFileSet = (_nxJson_namedInputs = nxJson.namedInputs) == null ? void 0 : _nxJson_namedInputs.production;
    if (productionFileSet) {
        productionFileSet.push('!{projectRoot}/**/?(*.)+(spec|test).[jt]s?(x)?(.snap)', '!{projectRoot}/tsconfig.spec.json');
        nxJson.namedInputs.production = Array.from(new Set(productionFileSet));
    }
    (0, _devkit.updateNxJson)(tree, nxJson);
}
function addPlugin(tree) {
    var _nxJson;
    const nxJson = (0, _devkit.readNxJson)(tree);
    var _plugins;
    (_plugins = (_nxJson = nxJson).plugins) != null ? _plugins : _nxJson.plugins = [];
    for (const plugin of nxJson.plugins){
        if (typeof plugin === 'string' ? plugin === '@nx/vite/plugin' : plugin.plugin === '@nx/vite/plugin') {
            return;
        }
    }
    nxJson.plugins.push({
        plugin: '@nx/vite/plugin',
        options: {
            buildTargetName: 'build',
            previewTargetName: 'preview',
            testTargetName: 'test',
            serveTargetName: 'serve',
            serveStaticTargetName: 'serve-static'
        }
    });
    (0, _devkit.updateNxJson)(tree, nxJson);
}

//# sourceMappingURL=utils.js.map