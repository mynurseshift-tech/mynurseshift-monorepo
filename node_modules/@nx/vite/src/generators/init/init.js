"use strict";
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    updateNxJsonSettings: function() {
        return updateNxJsonSettings;
    },
    initGenerator: function() {
        return initGenerator;
    },
    default: function() {
        return _default;
    }
});
const _extends = require("@swc/helpers/_/_extends");
const _devkit = require("@nx/devkit");
const _js = require("@nx/js");
const _utils = require("./lib/utils");
function updateNxJsonSettings(tree) {
    var _nxJson_namedInputs, _nxJson_plugins;
    const nxJson = (0, _devkit.readNxJson)(tree);
    const productionFileSet = (_nxJson_namedInputs = nxJson.namedInputs) == null ? void 0 : _nxJson_namedInputs.production;
    if (productionFileSet) {
        productionFileSet.push('!{projectRoot}/**/?(*.)+(spec|test).[jt]s?(x)?(.snap)', '!{projectRoot}/tsconfig.spec.json');
        nxJson.namedInputs.production = Array.from(new Set(productionFileSet));
    }
    const hasPlugin = (_nxJson_plugins = nxJson.plugins) == null ? void 0 : _nxJson_plugins.some((p)=>typeof p === 'string' ? p === '@nx/vite/plugin' : p.plugin === '@nx/vite/plugin');
    if (!hasPlugin) {
        var _nxJson, _nxJson_targetDefaults, _nxvitetest, _nxJson_targetDefaults_nxvitetest, _nxJson_targetDefaults_nxvitetest1;
        var _targetDefaults;
        (_targetDefaults = (_nxJson = nxJson).targetDefaults) != null ? _targetDefaults : _nxJson.targetDefaults = {};
        var _;
        (_ = (_nxJson_targetDefaults = nxJson.targetDefaults)[_nxvitetest = '@nx/vite:test']) != null ? _ : _nxJson_targetDefaults[_nxvitetest] = {};
        var _cache;
        (_cache = (_nxJson_targetDefaults_nxvitetest = nxJson.targetDefaults['@nx/vite:test']).cache) != null ? _cache : _nxJson_targetDefaults_nxvitetest.cache = true;
        var _inputs;
        (_inputs = (_nxJson_targetDefaults_nxvitetest1 = nxJson.targetDefaults['@nx/vite:test']).inputs) != null ? _inputs : _nxJson_targetDefaults_nxvitetest1.inputs = [
            'default',
            productionFileSet ? '^production' : '^default'
        ];
    }
    (0, _devkit.updateNxJson)(tree, nxJson);
}
async function initGenerator(tree, schema) {
    (0, _utils.moveToDevDependencies)(tree);
    updateNxJsonSettings(tree);
    const tasks = [];
    tasks.push(await (0, _js.initGenerator)(tree, _extends._({}, schema, {
        skipFormat: true,
        tsConfigName: schema.rootProject ? 'tsconfig.json' : 'tsconfig.base.json'
    })));
    const addPlugins = process.env.NX_PCV3 === 'true';
    if (addPlugins) {
        (0, _utils.addPlugin)(tree);
    }
    tasks.push((0, _utils.checkDependenciesInstalled)(tree, schema));
    return (0, _devkit.runTasksInSerial)(...tasks);
}
const _default = initGenerator;

//# sourceMappingURL=init.js.map