{"version":3,"sources":["../../../../../../packages/vite/src/generators/configuration/configuration.ts"],"sourcesContent":["import {\n  formatFiles,\n  GeneratorCallback,\n  joinPathFragments,\n  readNxJson,\n  readProjectConfiguration,\n  runTasksInSerial,\n  Tree,\n  updateJson,\n} from '@nx/devkit';\n\nimport {\n  addOrChangeBuildTarget,\n  addOrChangeServeTarget,\n  addPreviewTarget,\n  createOrEditViteConfig,\n  deleteWebpackConfig,\n  editTsConfig,\n  findExistingTargetsInProject,\n  handleUnknownExecutors,\n  handleUnsupportedUserProvidedTargets,\n  moveAndEditIndexHtml,\n  TargetFlags,\n  UserProvidedTargetName,\n} from '../../utils/generator-utils';\n\nimport initGenerator from '../init/init';\nimport vitestGenerator from '../vitest/vitest-generator';\nimport { ViteConfigurationGeneratorSchema } from './schema';\n\nexport async function viteConfigurationGenerator(\n  tree: Tree,\n  schema: ViteConfigurationGeneratorSchema\n) {\n  const tasks: GeneratorCallback[] = [];\n\n  const {\n    targets,\n    projectType,\n    root: projectRoot,\n  } = readProjectConfiguration(tree, schema.project);\n  let buildTargetName = 'build';\n  let serveTargetName = 'serve';\n  let testTargetName = 'test';\n\n  schema.includeLib ??= projectType === 'library';\n\n  // Setting default to jsdom since it is the most common use case (React, Web).\n  // The @nx/js:lib generator specifically sets this to node to be more generic.\n  schema.testEnvironment ??= 'jsdom';\n\n  /**\n   * This is for when we are converting an existing project\n   * to use the vite executors.\n   */\n  let projectAlreadyHasViteTargets: TargetFlags = {};\n\n  if (!schema.newProject) {\n    const userProvidedTargetName: UserProvidedTargetName = {\n      build: schema.buildTarget,\n      serve: schema.serveTarget,\n      test: schema.testTarget,\n    };\n\n    const {\n      validFoundTargetName,\n      projectContainsUnsupportedExecutor,\n      userProvidedTargetIsUnsupported,\n      alreadyHasNxViteTargets,\n    } = findExistingTargetsInProject(targets, userProvidedTargetName);\n    projectAlreadyHasViteTargets = alreadyHasNxViteTargets;\n    /**\n     * This means that we only found unsupported build targets in that project.\n     * The only way that buildTarget is defined, means that it is supported.\n     *\n     * If the `unsupported` flag was false, it would mean that we did not find\n     * a build target at all, so we can create a new one.\n     *\n     * So we only throw if we found a target, but it is unsupported.\n     */\n    if (!validFoundTargetName.build && projectContainsUnsupportedExecutor) {\n      throw new Error(\n        `The project ${schema.project} cannot be converted to use the @nx/vite executors.`\n      );\n    }\n\n    if (\n      alreadyHasNxViteTargets.build &&\n      (alreadyHasNxViteTargets.serve || projectType === 'library') &&\n      alreadyHasNxViteTargets.test\n    ) {\n      throw new Error(\n        `The project ${schema.project} is already configured to use the @nx/vite executors.\n        Please try a different project, or remove the existing targets \n        and re-run this generator to reset the existing Vite Configuration.\n        `\n      );\n    }\n\n    /**\n     * This means that we did not find any supported executors\n     * so we don't have any valid target names.\n     *\n     * However, the executors that we may have found are not in the\n     * list of the specifically unsupported executors either.\n     *\n     * So, we should warn the user about it.\n     */\n\n    if (\n      !projectContainsUnsupportedExecutor &&\n      !validFoundTargetName.build &&\n      !validFoundTargetName.serve &&\n      !validFoundTargetName.test\n    ) {\n      await handleUnknownExecutors(schema.project);\n    }\n\n    /**\n     * There is a possibility at this stage that the user has provided\n     * targets with unsupported executors.\n     * We keep track here of which of the targets that the user provided\n     * are unsupported.\n     * We do this with the `userProvidedTargetIsUnsupported` object,\n     * which contains flags for each target (whether it is supported or not).\n     *\n     * We also keep track of the targets that we found in the project,\n     * through the findExistingTargetsInProject function, which returns\n     * targets for build/serve/test that use supported executors, and\n     * can be converted to use the vite executors. These are the\n     * kept in the validFoundTargetName object.\n     */\n    await handleUnsupportedUserProvidedTargets(\n      userProvidedTargetIsUnsupported,\n      userProvidedTargetName,\n      validFoundTargetName\n    );\n\n    /**\n     * Once the user is at this stage, then they can go ahead and convert.\n     */\n\n    buildTargetName = validFoundTargetName.build ?? buildTargetName;\n    serveTargetName = validFoundTargetName.serve ?? serveTargetName;\n\n    if (projectType === 'application') {\n      moveAndEditIndexHtml(tree, schema, buildTargetName);\n    }\n\n    deleteWebpackConfig(\n      tree,\n      projectRoot,\n      targets?.[buildTargetName]?.options?.webpackConfig\n    );\n\n    editTsConfig(tree, schema);\n  }\n\n  const initTask = await initGenerator(tree, {\n    uiFramework: schema.uiFramework,\n    includeLib: schema.includeLib,\n    compiler: schema.compiler,\n    testEnvironment: schema.testEnvironment,\n    rootProject: projectRoot === '.',\n  });\n  tasks.push(initTask);\n\n  const nxJson = readNxJson(tree);\n  const hasPlugin = nxJson.plugins?.some((p) =>\n    typeof p === 'string'\n      ? p === '@nx/vite/plugin'\n      : p.plugin === '@nx/vite/plugin'\n  );\n\n  if (!hasPlugin) {\n    if (!projectAlreadyHasViteTargets.build) {\n      addOrChangeBuildTarget(tree, schema, buildTargetName);\n    }\n\n    if (!schema.includeLib) {\n      if (!projectAlreadyHasViteTargets.serve) {\n        addOrChangeServeTarget(tree, schema, serveTargetName);\n      }\n      if (!projectAlreadyHasViteTargets.preview) {\n        addPreviewTarget(tree, schema, serveTargetName);\n      }\n    }\n  }\n  if (projectType === 'library') {\n    // update tsconfig.lib.json to include vite/client\n    updateJson(\n      tree,\n      joinPathFragments(projectRoot, 'tsconfig.lib.json'),\n      (json) => {\n        if (!json.compilerOptions) {\n          json.compilerOptions = {};\n        }\n        if (!json.compilerOptions.types) {\n          json.compilerOptions.types = [];\n        }\n        if (!json.compilerOptions.types.includes('vite/client')) {\n          return {\n            ...json,\n            compilerOptions: {\n              ...json.compilerOptions,\n              types: [...json.compilerOptions.types, 'vite/client'],\n            },\n          };\n        }\n        return json;\n      }\n    );\n  }\n\n  if (!schema.newProject) {\n    // We are converting existing project to use Vite\n    if (schema.uiFramework === 'react') {\n      createOrEditViteConfig(\n        tree,\n        {\n          project: schema.project,\n          includeLib: schema.includeLib,\n          includeVitest: schema.includeVitest,\n          inSourceTests: schema.inSourceTests,\n          rollupOptionsExternal: [\n            \"'react'\",\n            \"'react-dom'\",\n            \"'react/jsx-runtime'\",\n          ],\n          imports: [\n            schema.compiler === 'swc'\n              ? `import react from '@vitejs/plugin-react-swc'`\n              : `import react from '@vitejs/plugin-react'`,\n          ],\n          plugins: ['react()'],\n        },\n        false,\n        undefined\n      );\n    } else {\n      createOrEditViteConfig(tree, schema, false, projectAlreadyHasViteTargets);\n    }\n  }\n\n  if (schema.includeVitest) {\n    const vitestTask = await vitestGenerator(tree, {\n      project: schema.project,\n      uiFramework: schema.uiFramework,\n      inSourceTests: schema.inSourceTests,\n      coverageProvider: 'v8',\n      skipViteConfig: true,\n      testTarget: testTargetName,\n      skipFormat: true,\n    });\n    tasks.push(vitestTask);\n  }\n\n  if (!schema.skipFormat) {\n    await formatFiles(tree);\n  }\n\n  return runTasksInSerial(...tasks);\n}\n\nexport default viteConfigurationGenerator;\n"],"names":["viteConfigurationGenerator","tree","schema","nxJson","tasks","targets","projectType","root","projectRoot","readProjectConfiguration","project","buildTargetName","serveTargetName","testTargetName","includeLib","testEnvironment","projectAlreadyHasViteTargets","newProject","userProvidedTargetName","build","buildTarget","serve","serveTarget","test","testTarget","validFoundTargetName","projectContainsUnsupportedExecutor","userProvidedTargetIsUnsupported","alreadyHasNxViteTargets","findExistingTargetsInProject","Error","handleUnknownExecutors","handleUnsupportedUserProvidedTargets","moveAndEditIndexHtml","deleteWebpackConfig","options","webpackConfig","editTsConfig","initTask","initGenerator","uiFramework","compiler","rootProject","push","readNxJson","hasPlugin","plugins","some","p","plugin","addOrChangeBuildTarget","addOrChangeServeTarget","preview","addPreviewTarget","updateJson","joinPathFragments","json","compilerOptions","types","includes","createOrEditViteConfig","includeVitest","inSourceTests","rollupOptionsExternal","imports","undefined","vitestTask","vitestGenerator","coverageProvider","skipViteConfig","skipFormat","formatFiles","runTasksInSerial"],"mappings":"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"}